#!/bin/bash

# A mock for the 'gh' command-line tool.
# This script intercepts calls made by stgit during tests to prevent
# real network requests and provide controlled, predictable responses.

# The first argument is the command (e.g., "auth", "repo", "pr")
COMMAND="$1"
shift

case "$COMMAND" in
  auth)
    if [[ "$1" == "status" ]]; then
      # Simulate a successful login
      exit 0
    fi
    ;;
  repo)
    if [[ "$1" == "view" ]]; then
      # Simulate the output of `gh repo view` for auto-configuration.
      # This provides a predictable environment for all tests.
      echo '{
        "owner": {
          "login": "test-owner"
        },
        "name": "test-repo",
        "defaultBranchRef": {
          "name": "main"
        }
      }'
      exit 0
    fi
    ;;
  pr)
     # This can be expanded to simulate `gh pr view`, `gh pr close`, etc.
     # For now, we just acknowledge the command.
     echo "Mocked gh pr command with args: $*"
     exit 0
    ;;
esac

# If an unknown command is called, print an error to the test output
# so we know we need to update the mock.
echo "Error: Unhandled mock gh command: $COMMAND $*" >&2
exit 1

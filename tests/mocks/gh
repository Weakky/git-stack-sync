#!/usr/bin/env bash

# This is a mock of the 'gh' CLI for testing purposes.
MOCK_STATE_DIR="/tmp/stgit_mock_gh_state"
mkdir -p "$MOCK_STATE_DIR"
# Keep a counter for created PRs to ensure unique PR numbers.
PR_COUNTER_FILE="$MOCK_STATE_DIR/pr_counter"
if [[ ! -f "$PR_COUNTER_FILE" ]]; then
    echo 20 > "$PR_COUNTER_FILE" # Start PR numbers at 20
fi


# --- MOCK BEHAVIOR ---
if [[ "$1" == "repo" && "$2" == "view" ]]; then
    echo '{ "owner": "test-user", "name": "test-repo", "base": "main" }'
    exit 0

elif [[ "$1" == "auth" && "$2" == "status" ]]; then
    exit 0

elif [[ "$1" == "pr" && "$2" == "view" ]]; then
    pr_number=$3
    state_file="$MOCK_STATE_DIR/pr_${pr_number}_state"
    pr_state="OPEN"
    if [[ -f "$state_file" ]]; then
        pr_state=$(cat "$state_file")
    fi

    if [[ "$4" == "--json" && "$5" == "state" ]]; then
         echo "$pr_state"
         exit 0
    fi
    if [[ "$4" == "--json" && "$5" == "state,url" ]]; then
        echo "{\"state\":\"$pr_state\", \"url\":\"https://github.com/mock/repo/pull/$pr_number\"}"
        exit 0
    fi

elif [[ "$1" == "pr" && "$2" == "close" ]]; then
    exit 0

elif [[ "$1" == "api" && "$2" =~ pulls/[0-9]+$ && "$3" == "--method" && "$4" == "PATCH" ]]; then
    exit 0

elif [[ "$1" == "api" && "$2" =~ pulls$ && "$3" == "--method" && "$4" == "POST" ]]; then
    # This mocks the PR creation call.
    if [[ -f "$MOCK_STATE_DIR/pr_create_fail" ]]; then
        echo '{"message":"Mock API error: Failed to create PR."}'
        exit 1
    fi
    
    pr_number=$(cat "$PR_COUNTER_FILE")
    echo "$((pr_number + 1))" > "$PR_COUNTER_FILE"
    
    echo "{\"number\": $pr_number}"
    exit 0
fi

# If the command is not one of the mocked ones, exit with an error.
echo "Error: Unmocked gh command received by mock: gh $*" >&2
exit 1

